palette = "jco",
title = "Score plot: individuos")
# Loading plot (variables activas)
p2 <- fviz_pca_var(miPCA,
col.var = "contrib", # Color según contribución a los ejes
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "Loading plot: variables")
# Mostrar ambos juntos
grid.arrange(p1, p2, nrow = 1)
mediasCluster = aggregate(fotocasaConfort, by = list("cluster" = misclust), mean)[,-1]
mediasCluster = aggregate(fotocasaConfort, by = list("cluster" = misclust), mean)[,-1]
mediasCluster = aggregate(fotocasaConfort, by = list("gruposWARD" = misclust), mean)[,-1]
nrow(fotocasaConfort)
length(misclust)
nrow(fotocasaConfort)
length(gruposWARD)
mediasCluster = aggregate(fotocasaConfort, by = list("cluster" = gruposWARD), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaConfort), labels = colnames(fotocasaConfort), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
fotocasaServicios = fotocasa[,tabla$Servicios == 1]
head(fotocasaServicios)
fotocasaServicios = scale(fotocasaServicios, center = TRUE, scale = TRUE)
midist_eu <- get_dist(fotocasaServicios, stand = FALSE, method = "euclidean")
fviz_dist(midist_eu, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
midist_manhattan <- get_dist(fotocasaServicios, stand = FALSE, method = "manhattan")
fviz_dist(midist_manhattan, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
help(get_dist)
help(get_dist)
midist_max <- get_dist(fotocasaServicios, stand = FALSE, method = "maximum")
fviz_dist(midist_max, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
midist_canberra <- get_dist(fotocasaServicios, stand = FALSE, method = "canberra")
fviz_dist(midist_canberra, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(grid)
library(gridExtra)
help("fviz_nbclust")
p1 = fviz_nbclust(x = fotocasaServicios, FUNcluster = hcut, diss=midist_eu,
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaServicios, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,diss=midist_eu,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaServicios, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaServicios, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaServicios, FUNcluster = kmeans, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaServicios, FUNcluster = kmeans, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_eu, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=6)
table(gruposWARD)
clustPAM <- pam(midist_eu, k =8, diss=TRUE)
table(clustPAM$clustering)
set.seed(100)
clustMEANS <- kmeans(fotocasaServicios, centers = 7, nstart = 20)
table(clustMEANS$cluster)
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(8)
colores3=pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_eu), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_eu), col=colores2, border=NA, main = "K-MEDIOIDES")
plot(silhouette(clustMEANS$cluster, midist_eu), col=colores3, border=NA, main = "K-MEDIAS")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
colnames(fotocasa)
# Vector con nombres de todas las columnas
columnas= colnames(fotocasa)
# Definir las variables de confort
confort = c("tieneAscensor", "tieneTrastero", "tieneCalefacción", "tieneAireAcondicionado", "bathrooms", "surface", "rooms"
)
# Identificar automáticamente las variables de servicios (aquellas que terminan en "_count")
servicios = grep("_count$", columnas, value = TRUE)
# Crear el data.frame de flags
tabla <- data.frame(
Variable   = columnas,
Confort    = as.integer(columnas %in% confort),
Servicios  = as.integer(columnas %in% servicios),
stringsAsFactors = FALSE
)
# Mostrar resultado
print(tabla)
fotocasaConfort = fotocasa[,tabla$Confort == 1]
head(fotocasaConfort)
fotocasaConfort = scale(fotocasaConfort, center = TRUE, scale = TRUE)
help(get_dist)
#distancia GOWER
midist_gower <- gower_dist <- daisy(fotocasaConfort, metric = "gower")
fviz_dist(midist_gower, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(grid)
library(gridExtra)
help("fviz_nbclust")
p1 = fviz_nbclust(x = fotocasaConfort, FUNcluster = hcut, diss=midist_gower,
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaConfort, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,diss=midist_gower,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaConfort, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaConfort, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_gower, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=5)
table(gruposWARD)
clustPAM <- pam(midist_gower, k =6, diss=TRUE)
table(clustPAM$clustering)
library(ggsci)
colores = pal_npg("nrc")(5)
colores2 = pal_npg("nrc")(6)
par(mfrow = c(1,2))
plot(silhouette(gruposWARD, midist_gower), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_gower), col=colores2, border=NA, main = "K-MEDIOIDES")
gruposWARD=factor(gruposWARD)
miPCA = PCA(fotocasaConfort, scale.unit = FALSE, graph = FALSE, ncp=2)
eig.val = get_eigenvalue(miPCA)
Vmedia = 100 * (1/nrow(eig.val))
fviz_eig(miPCA, addlabels = TRUE) +
geom_hline(yintercept=Vmedia, linetype=2, color="red")
p1 <- fviz_pca_ind(miPCA,
geom = "point",
habillage = gruposWARD,
addEllipses = TRUE,
palette = "jco",
title = "Score plot: individuos")
# Loading plot (variables activas)
p2 <- fviz_pca_var(miPCA,
col.var = "contrib", # Color según contribución a los ejes
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "Loading plot: variables")
# Mostrar ambos juntos
grid.arrange(p1, p2, nrow = 1)
mediasCluster = aggregate(fotocasaConfort, by = list("cluster" = gruposWARD), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaConfort), labels = colnames(fotocasaConfort), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
fotocasaServicios = fotocasa[,tabla$Servicios == 1]
head(fotocasaServicios)
fotocasaServicios = scale(fotocasaServicios, center = TRUE, scale = TRUE)
midist_eu <- get_dist(fotocasaServicios, stand = FALSE, method = "euclidean")
fviz_dist(midist_eu, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(grid)
library(gridExtra)
help("fviz_nbclust")
p1 = fviz_nbclust(x = fotocasaServicios, FUNcluster = hcut, diss=midist_eu,
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaServicios, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,diss=midist_eu,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaServicios, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaServicios, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaServicios, FUNcluster = kmeans, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaServicios, FUNcluster = kmeans, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_eu, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=6)
table(gruposWARD)
clustPAM <- pam(midist_eu, k =8, diss=TRUE)
table(clustPAM$clustering)
set.seed(100)
clustMEANS <- kmeans(fotocasaServicios, centers = 7, nstart = 20)
table(clustMEANS$cluster)
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(8)
colores3=pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_eu), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_eu), col=colores2, border=NA, main = "K-MEDIOIDES")
plot(silhouette(clustMEANS$cluster, midist_eu), col=colores3, border=NA, main = "K-MEDIAS")
head(fotocasaServicios)
head(fotocasa)
head(fotocasaServicios)
# Añadir el cluster a tu dataframe original
fotocasaServicios$cluster <- clustMEANS$cluster
head(fotocasaServicios)
# Añadir el cluster a tu dataframe original
fotocasaServicios
fotocasaServicios = fotocasa[,tabla$Servicios == 1]
head(fotocasaServicios)
fotocasaServicios = scale(fotocasaServicios, center = TRUE, scale = TRUE)
# Añadir el cluster a tu dataframe original
clustMEANS
nrow(fotocasaServicios) == length(clustMEANS$cluster)
# Añadir el cluster a tu dataframe original
clustMEANS$cluster
# Añadir el cluster a tu dataframe original
fotocasaServicios$cluster
# Añadir el cluster a tu dataframe original
fotocasaServicios$cluster=clustMEANS$cluster
fotocasaServicios
fotocasaServiciosCE = scale(fotocasaServicios, center = TRUE, scale = TRUE)
fotocasaServicios = fotocasa[,tabla$Servicios == 1]
head(fotocasaServicios)
fotocasaServiciosCE = scale(fotocasaServicios, center = TRUE, scale = TRUE)
# Añadir el cluster a tu dataframe original
fotocasaServicios$cluster=clustMEANS$cluster
fotocasaServicios
fotocasaServiciosCE
fotocasaServicios
install.packages("ggplot2")
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
library(ggplot2)
library(leaflet)
gruposWARD
fotocasaConfort = fotocasa[,tabla$Confort == 1]
head(fotocasaConfort)
fotocasaConfortCE = scale(fotocasaConfort, center = TRUE, scale = TRUE)
help(get_dist)
#distancia GOWER
midist_gower <- gower_dist <- daisy(fotocasaConfortCE, metric = "gower")
fviz_dist(midist_gower, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(grid)
library(gridExtra)
help("fviz_nbclust")
p1 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = hcut, diss=midist_gower,
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,diss=midist_gower,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_gower, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=5)
table(gruposWARD)
clustPAM <- pam(midist_gower, k =6, diss=TRUE)
table(clustPAM$clustering)
library(ggsci)
colores = pal_npg("nrc")(5)
colores2 = pal_npg("nrc")(6)
par(mfrow = c(1,2))
plot(silhouette(gruposWARD, midist_gower), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_gower), col=colores2, border=NA, main = "K-MEDIOIDES")
fotocasaConfort$cluster=gruposWARD
gruposWARD
fotocasaConfort
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
# Suponiendo que tu dataframe se llama df_clusters y tiene columnas latitud, longitud y cluster
ggplot(fotocasaServicios, aes(x = longitud, y = latitud, color = factor(cluster))) +
geom_point() +
labs(title = "Clustering de Inmuebles por Coordenadas")
head(fotocasa)
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
library(leaflet)
leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = fotocasa$lng,
lat = fotocasa$lat,
color = ~factor(fotocasaServicios$cluster),
radius = 5,
stroke = FALSE,
fillOpacity = 0.8) %>%
setView(lng = mean(fotocasa$lng),
lat = mean(fotocasa$lat),
zoom = 13)
library(leaflet)
leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = fotocasa$lng,
lat = fotocasa$lat,
color = ~factor(fotocasaServicios$cluster),
radius = 5,
stroke = FALSE,
fillOpacity = 0.8) %>%
setView(lng = mean(fotocasa$lng),
lat = mean(fotocasa$lat),
zoom = 13)
fotocasaServicios$cluster=clustPAM$clustering
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
clustWARD <- hclust(midist_eu, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=6)
table(gruposWARD)
clustPAM <- pam(midist_eu, k =8, diss=TRUE)
table(clustPAM$clustering)
set.seed(100)
clustMEANS <- kmeans(fotocasaServiciosCE, centers = 7, nstart = 20)
table(clustMEANS$cluster)
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
fotocasaServicios$cluster=clustPAM$clustering
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
fotocasaServicios$cluster=gruposWARD
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
fotocasaServicios$cluster=clustMEANS$cluster
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
install.packages(c("ggmap", "viridis"))
library(viridis)
library(ggmap)
#install.packages(c("ggmap", "viridis"))
library(ggmap)
library(viridis)
# Obtener mapa base de Stamen (gratis, no requiere API)
valencia_map <- get_map(location = "Valencia, Spain", zoom = 13, source = "stamen", maptype = "toner-lite")
#install.packages(c("ggmap", "viridis"))
library(ggmap)
library(viridis)
# Obtener mapa base de Stamen (gratis, no requiere API)
valencia_map <- get_map(location = "Valencia, Spain", zoom = 13, source = "google", maptype = "toner-lite")
#install.packages(c("ggmap", "viridis"))
library(ggmap)
library(viridis)
# Obtener mapa base de Stamen (gratis, no requiere API)
valencia_map <- get_stamenmap(
bbox = c(left = -0.42, bottom = 39.44, right = -0.30, top = 39.52),
zoom = 13,
maptype = "toner-lite"
)
#install.packages(c("ggmap", "viridis"))
library(ggmap)
library(viridis)
# Obtener mapa base de Stamen (gratis, no requiere API)
valencia_map <- get_stadiamap(
bbox = c(left = -0.42, bottom = 39.44, right = -0.30, top = 39.52),
zoom = 13,
maptype = "toner-lite"
)
#install.packages(c("ggmap", "viridis"))
library(ggmap)
library(viridis)
# Obtener mapa base de Stamen (gratis, no requiere API)
valencia_map <- get_stadiamap(arg="stamen_toner_lite",
bbox = c(left = -0.42, bottom = 39.44, right = -0.30, top = 39.52),
zoom = 13,
maptype = "toner-lite"
)
#install.packages(c("ggmap", "viridis"))
library(ggmap)
library(viridis)
# Obtener mapa base de Stamen (gratis, no requiere API)
valencia_map <- get_stadiamap(
bbox = c(left = -0.42, bottom = 39.44, right = -0.30, top = 39.52),
zoom = 13,
maptype = "stamen_toner_lite"
)
help("get_googlemap")
(map <- get_googlemap(c(-97.14667, 31.5493)))
help(get_map)
help(get_map)
map <- get_map(location = "texas", zoom = 6, source = "stadia")
map <- get_stadiamap(location = "texas", zoom = 6, source = "stadia")
library(leaflet)
library(RColorBrewer)
# Crear paleta con colores diferenciables
pal <- colorFactor(palette = "Set1", domain = fotocasaServicios$cluster)
leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = fotocasa$lng,
lat = fotocasa$lat,
color = ~pal(fotocasaServicios$cluster),
radius = 5,
stroke = FALSE,
fillOpacity = 0.8) %>%
addLegend("bottomright", pal = pal, values = fotocasaServicios$cluster,
title = "Clusters") %>%
setView(lng = mean(fotocasa$lng),
lat = mean(fotocasa$lat),
zoom = 13)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(lng = -0.379, lat = 39.467, zoom = 13)  # Coordenadas aproximadas de Valencia
length(fotocasaServicios$cluster)
nrow(fotocasa)
head(fotocasa)
sum(is.na(fotocasa$lat))  # Cuántos NA hay en latitud
sum(is.na(fotocasa$lng))  # Cuántos NA hay en longitud
library(leaflet)
library(RColorBrewer)
# Crear paleta con colores diferenciados
pal <- colorFactor(palette = "Set1", domain = fotocasaServicios$cluster)
# Verificamos que 'df_coords' tenga las columnas adecuadas
if("lat" %in% colnames(fotocasa) && "lng" %in% colnames(fotocasa)) {
leaflet(fotocasa) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lng,
lat = ~lat,
color = ~pal(fotocasaServicios$cluster),
radius = 5,
stroke = FALSE,
fillOpacity = 0.8
) %>%
addLegend("bottomright", pal = pal, values = fotocasaServicios$cluster,
title = "Clusters") %>%
setView(lng = mean(fotocasa$lng),
lat = mean(fotocasa$lat),
zoom = 13)
} else {
print("Faltan las columnas 'latitud' o 'longitud' en el dataframe.")
}
