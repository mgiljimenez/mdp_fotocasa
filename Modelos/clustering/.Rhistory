knitr::opts_chunk$set(echo = TRUE)
colnames(fotocasa)
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
colnames(fotocasa)
# Vector con nombres de todas las columnas
vars <- colnames(fotocasa)
# Definir las variables de confort
confort_vars <- c(
"bathrooms", "floor", "hotWater", "rooms", "surface",
"tieneAscensor", "tieneTrastero", "tieneCalefaccion", "tieneAireAcondicionado"
)
# Identificar autom치ticamente las variables de servicios (aquellas que terminan en "_count")
servicios_vars <- grep("_count$", vars, value = TRUE)
# Crear el data.frame de flags
df_flags <- data.frame(
Variable   = vars,
Confort    = as.integer(vars %in% confort_vars),
Servicios  = as.integer(vars %in% servicios_vars),
stringsAsFactors = FALSE
)
# Mostrar resultado
print(df_flags)
# Vector con nombres de todas las columnas
columnas= colnames(fotocasa)
# Definir las variables de confort
confort = c(
"bathrooms", "floor", "hotWater", "rooms", "surface",
"tieneAscensor", "tieneTrastero", "tieneCalefaccion", "tieneAireAcondicionado"
)
# Identificar autom치ticamente las variables de servicios (aquellas que terminan en "_count")
servicios = grep("_count$", columnas, value = TRUE)
# Crear el data.frame de flags
tablaVar <- data.frame(
Variable   = columnas,
Confort    = as.integer(columnas %in% confort),
Servicios  = as.integer(columnas %in% servicios),
stringsAsFactors = FALSE
)
# Mostrar resultado
print(tablaVar)
# Vector con nombres de todas las columnas
columnas= colnames(fotocasa)
# Definir las variables de confort
confort = c(
"bathrooms", "floor", "hotWater", "rooms", "surface",
"tieneAscensor", "tieneTrastero", "tieneCalefaccion", "tieneAireAcondicionado"
)
# Identificar autom치ticamente las variables de servicios (aquellas que terminan en "_count")
servicios = grep("_count$", columnas, value = TRUE)
# Crear el data.frame de flags
tabla <- data.frame(
Variable   = columnas,
Confort    = as.integer(columnas %in% confort),
Servicios  = as.integer(columnas %in% servicios),
stringsAsFactors = FALSE
)
# Mostrar resultado
print(tabla)
fotocasaConfort = fotocasaImp[,tabla$Confort == 1]
fotocasaConfort = fotocasa[,tabla$Confort == 1]
fotocasaConfort = scale(fotocasaConfort, center = TRUE, scale = TRUE)
fotocasaConfort
fotocasaConfort = fotocasa[,tabla$Confort == 1]
fotocasaConfort = scale(fotocasaConfort, center = TRUE, scale = TRUE)
midist <- get_dist(cereals2, stand = FALSE, method = "euclidean")
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "euclidean")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "euclidean")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
help("get_dist")
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "manhattan")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
'''
#distancia EUCLIDEA
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "euclidean")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#distancia MANHATTAN
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "manhattan")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
'''
#distancia EUCLIDEA
#midist <- get_dist(fotocasaConfort, stand = FALSE, method = "euclidean")
#fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
#   gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#distancia MANHATTAN
#midist <- get_dist(fotocasaConfort, stand = FALSE, method = "manhattan")
#fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
#        gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#distancia MAXIMA
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "maximum")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#distancia MAXIMA
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "maximum")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#distancia EUCLIDEA
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "euclidean")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#distancia CANBERRA
midist <- get_dist(fotocasaConfort, stand = FALSE, method = "canberra")
fviz_dist(midist, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
set.seed(100)
myN = c(20, 35, 50, 65)  # m
myhopkins = NULL
myseed = sample(1:1000, 10)
for (i in myN) {
for (j in myseed) {
tmp = get_clust_tendency(data = fotocasaConfort, n = i, graph = FALSE, seed = j)
myhopkins = c(myhopkins, tmp$hopkins_stat)
}
}
library(grid)
library(gridExtra)
p1 = fviz_nbclust(x = fotocasaConfort, FUNcluster = hcut, method = "silhouette",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaConfort, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
#distancia MANHATTAN
midist_manhattan <- get_dist(fotocasaConfort, stand = FALSE, method = "manhattan")
fviz_dist(midist_manhattan, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
clust1 <- hclust(midist_manhattan, method="ward.D2")
grupos1 <- cutree(clust1, k=7)
table(grupos1)
clust1 <- hclust(midist_manhattan, method="ward.D2")
grupos1 <- cutree(clust1, k=7)
table(grupos1)
fviz_dend(clust1, k = 7,
cex = 0.5, color_labels_by_k = TRUE,
rect = TRUE) # dibujar rect치ngulos
p1 = fviz_nbclust(x = fotocasaConfort, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaConfort, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustPAM <- pam(cereals2, k = 7)
clustPAM <- pam(fotocasaConfort, k = 7)
table(clustPAM$clustering)
clustWARD <- hclust(midist_manhattan, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=7)
table(gruposWARD)
clustPAM <- pam(fotocasaConfort, k = 7)
table(clustPAM$clustering)
p1 = fviz_nbclust(x = fotocasaConfort, FUNcluster = kmeans, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "K-means")
p2 = fviz_nbclust(x = fotocasaConfort, FUNcluster = kmeans, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "K-means")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_manhattan, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=7)
table(gruposWARD)
clustPAM <- pam(fotocasaConfort, k = 7)
table(clustPAM$clustering)
clustMEANS <- kmeans(fotocasaConfort, centers = 7, nstart = 20)
table(clustMEANS$cluster)
#distancia EUCLIDEA
midist_eu <- get_dist(fotocasaConfort, stand = FALSE, method = "euclidean")
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_manhattan), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$cluster, midist_manhattan), col=colores, border=NA, main = "K-MEDIAS")
plot(silhouette(clustMEANS$clustering, midist_eu), col=colores2, border=NA, main = "K-MEDOIDES")
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_manhattan), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$cluster, midist_manhattan), col=colores, border=NA, main = "K-MEDIOIDES")
plot(silhouette(clustMEANS$clustering, midist_eu), col=colores2, border=NA, main = "K-MEDIAS")
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_manhattan), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_manhattan), col=colores, border=NA, main = "K-MEDIOIDES")
plot(silhouette(clustMEANS$cluster, midist_eu), col=colores2, border=NA, main = "K-MEDIAS")
