error_full <- rowSums((original_full - recon_full)^2)
error_clean <- rowSums((original_clean - recon_clean)^2)
# Comparar errores
mean(error_full)
mean(error_clean)
boxplot(error_full, error_clean,
names = c("Con anómalos", "Sin anómalos"),
main = "Error de reconstrucción PCA")
predicciones_sin_anomalos <- reconstruir_pca(res.pca_sin_anomalos, ncp = K)
# Visualiza las primeras filas
head(predicciones_sin_anomalos)
# Visualiza las primeras filas
predicciones_sin_anomalos
# --- RECONSTRUCCIÓN Y COMPARACIÓN DE ERRORES ---
# Función para reconstruir datos desde PCA
reconstruir_pca <- function(pca_obj, ncp = 4) {
scores <- pca_obj$ind$coord[, 1:ncp]
loadings <- pca_obj$var$coord[, 1:ncp]
reconstructed <- scores %*% t(loadings)
means <- pca_obj$call$centre
sds <- pca_obj$call$ecart.type
reconstructed_unscaled <- sweep(reconstructed, 2, sds, FUN = "*")
reconstructed_unscaled <- sweep(reconstructed_unscaled, 2, means, FUN = "+")
return(reconstructed_unscaled)
}
# Escalar los datos originales y los sin anómalos
data_scaled_full <- scale(fotocasa_pca[, vars_continuas])
data_scaled_clean <- scale(pisos_sin_anomalos)
# Reconstrucción
recon_full <- reconstruir_pca(res.pca, ncp = K)
recon_clean <- reconstruir_pca(res.pca_sin_anomalos, ncp = K)
# Datos originales (no escalados)
original_full <- fotocasa_pca[, vars_continuas]
original_clean <- pisos_sin_anomalos
# Error de reconstrucción por fila
error_full <- rowSums((original_full - recon_full)^2)
error_clean <- rowSums((original_clean - recon_clean)^2)
# Comparar errores
mean(error_full)
mean(error_clean)
boxplot(error_full, error_clean,
names = c("Con anómalos", "Sin anómalos"),
main = "Error de reconstrucción PCA")
# Convertir la matriz reconstruida en data.frame
df_pred <- as.data.frame(predicciones_sin_anomalos)
# Poner los nombres de columnas iguales a los datos originales
colnames(df_pred) <- colnames(pisos_sin_anomalos)
ncol(pisos_sin_anomalos)
ncol(predicciones_sin_anomalos)
# --- RECONSTRUCCIÓN Y COMPARACIÓN DE ERRORES ---
# Función para reconstruir datos desde PCA
reconstruir_pca <- function(pca_obj, ncp = 4) {
scores <- pca_obj$ind$coord[, 1:ncp]
loadings <- pca_obj$var$coord[, 1:ncp]
reconstructed <- scores %*% t(loadings)
means <- pca_obj$call$centre
sds <- pca_obj$call$ecart.type
reconstructed_unscaled <- sweep(reconstructed, 2, sds, FUN = "*")
reconstructed_unscaled <- sweep(reconstructed_unscaled, 2, means, FUN = "+")
return(reconstructed_unscaled)
}
# Escalar los datos originales y los sin anómalos
data_scaled_full <- scale(fotocasa_pca[, vars_continuas])
data_scaled_clean <- scale(pisos_sin_anomalos)
# Reconstrucción
recon_full <- reconstruir_pca(res.pca, ncp = K)
recon_clean <- reconstruir_pca(res.pca_sin_anomalos, ncp = K)
# Datos originales (no escalados)
original_full <- fotocasa_pca[, vars_continuas]
original_clean <- pisos_sin_anomalos
# Error de reconstrucción por fila
error_full <- rowSums((original_full - recon_full)^2)
error_clean <- rowSums((original_clean - recon_clean)^2)
# Comparar errores
mean(error_full)
mean(error_clean)
boxplot(error_full, error_clean,
names = c("Con anómalos", "Sin anómalos"),
main = "Error de reconstrucción PCA")
# Convertir la matriz reconstruida en data.frame
df_pred <- as.data.frame(predicciones_sin_anomalos)
# Poner los nombres de columnas iguales a los datos originales
colnames(df_pred) <- setdiff(colnames(pisos_sin_anomalos), "priceAmount")
# Opcional: poner los nombres de filas iguales a los datos originales
rownames(df_pred) <- rownames(pisos_sin_anomalos)
# Mostrar las primeras filas de forma ordenada
head(df_pred)
# --- RECONSTRUCCIÓN Y COMPARACIÓN DE ERRORES ---
# Función para reconstruir datos desde PCA
reconstruir_pca <- function(pca_obj, ncp = 4) {
scores <- pca_obj$ind$coord[, 1:ncp]
loadings <- pca_obj$var$coord[, 1:ncp]
reconstructed <- scores %*% t(loadings)
means <- pca_obj$call$centre
sds <- pca_obj$call$ecart.type
reconstructed_unscaled <- sweep(reconstructed, 2, sds, FUN = "*")
reconstructed_unscaled <- sweep(reconstructed_unscaled, 2, means, FUN = "+")
return(reconstructed_unscaled)
}
# Escalar los datos originales y los sin anómalos
data_scaled_full <- scale(fotocasa_pca[, vars_continuas])
data_scaled_clean <- scale(pisos_sin_anomalos)
# Reconstrucción
recon_full <- reconstruir_pca(res.pca, ncp = K)
recon_clean <- reconstruir_pca(res.pca_sin_anomalos, ncp = K)
# Datos originales (no escalados)
original_full <- fotocasa_pca[, vars_continuas]
original_clean <- pisos_sin_anomalos
# Error de reconstrucción por fila
error_full <- rowSums((original_full - recon_full)^2)
error_clean <- rowSums((original_clean - recon_clean)^2)
# Comparar errores
mean(error_full)
mean(error_clean)
boxplot(error_full, error_clean,
names = c("Con anómalos", "Sin anómalos"),
main = "Error de reconstrucción PCA")
# Convertir la matriz reconstruida en data.frame
df_pred <- as.data.frame(predicciones_sin_anomalos)
# Poner los nombres de columnas iguales a los datos originales
colnames(df_pred) <- setdiff(colnames(pisos_sin_anomalos), "priceAmount")
# Opcional: poner los nombres de filas iguales a los datos originales
rownames(df_pred) <- rownames(pisos_sin_anomalos)
# Mostrar las primeras filas de forma ordenada
head(df_pred)
scores <- res.pca$ind$coord[, 1:K]  # extraer primeras K componentes
model <- lm(priceAmount ~ ., data = as.data.frame(scores))
# --- RECONSTRUCCIÓN Y COMPARACIÓN DE ERRORES ---
# Función para reconstruir datos desde PCA
reconstruir_pca <- function(pca_obj, ncp = 4) {
scores <- pca_obj$ind$coord[, 1:ncp]
loadings <- pca_obj$var$coord[, 1:ncp]
reconstructed <- scores %*% t(loadings)
means <- pca_obj$call$centre
sds <- pca_obj$call$ecart.type
reconstructed_unscaled <- sweep(reconstructed, 2, sds, FUN = "*")
reconstructed_unscaled <- sweep(reconstructed_unscaled, 2, means, FUN = "+")
return(reconstructed_unscaled)
}
# Escalar los datos originales y los sin anómalos
data_scaled_full <- scale(fotocasa_pca[, vars_continuas])
data_scaled_clean <- scale(pisos_sin_anomalos)
# Reconstrucción
recon_full <- reconstruir_pca(res.pca, ncp = K)
recon_clean <- reconstruir_pca(res.pca_sin_anomalos, ncp = K)
# Datos originales (no escalados)
original_full <- fotocasa_pca[, vars_continuas]
original_clean <- pisos_sin_anomalos
# Error de reconstrucción por fila
error_full <- rowSums((original_full - recon_full)^2)
error_clean <- rowSums((original_clean - recon_clean)^2)
# Comparar errores
mean(error_full)
mean(error_clean)
boxplot(error_full, error_clean,
names = c("Con anómalos", "Sin anómalos"),
main = "Error de reconstrucción PCA")
# Convertir la matriz reconstruida en data.frame
df_pred <- as.data.frame(predicciones_sin_anomalos)
# Poner los nombres de columnas iguales a los datos originales
colnames(df_pred) <- setdiff(colnames(pisos_sin_anomalos), "priceAmount")
# Opcional: poner los nombres de filas iguales a los datos originales
rownames(df_pred) <- rownames(pisos_sin_anomalos)
# Mostrar las primeras filas de forma ordenada
head(df_pred)
# Extraer scores PCA (componentes principales)
scores <- as.data.frame(res.pca$ind$coord[, 1:K])
# Añadir la variable priceAmount desde tus datos originales (ojo que debe coincidir en filas)
scores$priceAmount <- fotocasa_pca$priceAmount
# Ajustar el modelo de regresión
model <- lm(priceAmount ~ ., data = scores)
summary(model)
model
summary(model)
# --- RECONSTRUCCIÓN Y COMPARACIÓN DE ERRORES ---
# Función para reconstruir datos desde PCA
reconstruir_pca <- function(pca_obj, ncp = 4) {
scores <- pca_obj$ind$coord[, 1:ncp]
loadings <- pca_obj$var$coord[, 1:ncp]
reconstructed <- scores %*% t(loadings)
means <- pca_obj$call$centre
sds <- pca_obj$call$ecart.type
reconstructed_unscaled <- sweep(reconstructed, 2, sds, FUN = "*")
reconstructed_unscaled <- sweep(reconstructed_unscaled, 2, means, FUN = "+")
return(reconstructed_unscaled)
}
# Escalar los datos originales y los sin anómalos
data_scaled_full <- scale(fotocasa_pca[, vars_continuas])
data_scaled_clean <- scale(pisos_sin_anomalos)
# Reconstrucción
recon_full <- reconstruir_pca(res.pca, ncp = K)
recon_clean <- reconstruir_pca(res.pca_sin_anomalos, ncp = K)
# Datos originales (no escalados)
original_full <- fotocasa_pca[, vars_continuas]
original_clean <- pisos_sin_anomalos
# Error de reconstrucción por fila
error_full <- rowSums((original_full - recon_full)^2)
error_clean <- rowSums((original_clean - recon_clean)^2)
# Comparar errores
mean(error_full)
mean(error_clean)
boxplot(error_full, error_clean,
names = c("Con anómalos", "Sin anómalos"),
main = "Error de reconstrucción PCA")
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
K=4
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup='priceAmount')
eigenval <- res.pca$eig[, 1]
misScores = res.pca$ind$coord[,1:K]
miT2 = colSums(t(misScores**2)/eig.val[1:K,1])
I = nrow(variables)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "p", xlab = "Pisos", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
# Gráfico de las variables proyectadas en las primeras dos componentes
fviz_pca_var(res.pca_sin_anomalos, axes = c(1, 2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
# Gráfico de las variables proyectadas en las primeras y terceras componentes
fviz_pca_var(res.pca_sin_anomalos, axes = c(3, 4), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = 10, quanti.sup='priceAmount')
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:7,])
K=4
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup='priceAmount')
eigenval <- res.pca$eig[, 1]
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = 10, quanti.sup='priceAmount')
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:7,])
K=4
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup='priceAmount')
eigenval <- res.pca$eig[, 1]
misScores = res.pca$ind$coord[,1:K]
miT2 = colSums(t(misScores**2)/eig.val[1:K,1])
I = nrow(variables)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "p", xlab = "Pisos", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = 10, quanti.sup='priceAmount')
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:7,])
K=4
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup='priceAmount')
eigenval <- res.pca$eig[, 1]
misScores = res.pca$ind$coord[,1:K]
misLoadings <- res.pca$var$coord[, 1:K]
miT2 = colSums(t(misScores**2)/eig.val[1:K,1])
I = nrow(variables)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "p", xlab = "Pisos", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = 10, quanti.sup='priceAmount')
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:7,])
K=4
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup='priceAmount')
eigenval <- res.pca$eig[, 1]
misScores = res.pca$ind$coord[,1:K]
misLoadings <- res.pca$var$coord[, 1:K]
X <- scale(fotocasa_pca[, vars_continuas])
miT2 = colSums(t(misScores**2)/eig.val[1:K,1])
I = nrow(variables)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "p", xlab = "Pisos", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
myE = X - misScores %*% t(misLoadings)
myE = X - misScores %*% t(misLoadings)
dim(X)
dim(misScores)
dim(misLoadings)
dim(X)
dim(misScores)
fotocasa = read_excel("fotocasaImp.xlsx")
fotocasa <- as.data.frame(fotocasa)
variables <- fotocasa[, c(9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31, 32, 33)]
variables
fotocasa_pcaCE = fotocasa_pca[,setdiff(colnames(fotocasa_pca), c("priceAmount"))]
fotocasa_pcaCE = scale(fotocasa_pcaCE, center = TRUE, scale = TRUE)
X = as.matrix(fotocasa_pcaCE)
# Calculamos los loadings a partir de las coordenadas de las variables
# ya que la librería FactoMineR nos devuelve los loadings ponderados
# por la importancia de cada componente principal.
misLoadings = sweep(res.pca$var$coord, 2, sqrt(res.pca$eig[1:K,1]), FUN="/")
miT2 = colSums(t(misScores**2)/eig.val[1:K,1])
I = nrow(variables)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "p", xlab = "Pisos", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
dim(misScores)
dim(misLoadings)
dim(X)
dim(misScores)
dim(X)
X
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
fotocasa <- as.data.frame(fotocasa)
rownames(fotocasa) <- fotocasa[[1]]
variables_pca=c("energyEfficiencyRatingType","environmentImpactRatingType", "bathrooms", "hotWater", "rooms", "surface", "tieneAscensor", "tieneTrastero", "tieneCalefaccion", "tieneAireAcondicionado", "GeoGeneralRating", "propertyCounter_buy", "priceDescription_buy", "propertyCounter_rent", "priceDescription_rent", "supermarket_count", "pharmacy_count", "hospital_count", "university_count", "college_count", "public_transport_count", "priceAmount", "priceAmountDrop")
fotocasa_pca <- fotocasa[, variables_pca]
head(fotocasa_pca)
# priceAmount es la variable objetivo, la eliminamos de los inputs
vars_continuas <- c(
"bathrooms", "rooms", "surface", "priceAmountDrop",
"propertyCounter_buy", "priceDescription_buy",
"propertyCounter_rent", "priceDescription_rent",
"supermarket_count", "pharmacy_count", "hospital_count",
"university_count", "college_count", "public_transport_count", "priceAmount"
)
vars_binarias <- c(
"tieneAscensor", "tieneTrastero", "tieneCalefaccion", "tieneAireAcondicionado"
)
vars_ordinales <- c(
"energyEfficiencyRatingType", "environmentImpactRatingType", "GeoGeneralRating"
)
fotocasa_pca
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca = PCA(fotocasa_pca[,vars_continuas], scale.unit = TRUE, graph = FALSE, ncp = 10, quanti.sup='priceAmount')
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:7,])
# priceAmount es la variable objetivo, la eliminamos de los inputs
vars_continuas <- c(
"bathrooms", "rooms", "surface", "priceAmountDrop",
"propertyCounter_buy", "priceDescription_buy",
"propertyCounter_rent", "priceDescription_rent",
"supermarket_count", "pharmacy_count", "hospital_count",
"university_count", "college_count", "public_transport_count", "priceAmount"
)
vars_binarias <- c(
"tieneAscensor", "tieneTrastero", "tieneCalefaccion", "tieneAireAcondicionado"
)
vars_ordinales <- c(
"energyEfficiencyRatingType", "environmentImpactRatingType", "GeoGeneralRating"
)
fotocasa_pca=fotocasa_pca[,vars_continuas]
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca = PCA(fotocasa_pca, scale.unit = TRUE, graph = FALSE, ncp = 10, quanti.sup='priceAmount')
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:7,])
K=4
res.pca = PCA(fotocasa_pca, scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup='priceAmount')
eigenval <- res.pca$eig[, 1]
fotocasa_pcaCE = fotocasa_pca[,setdiff(colnames(fotocasa_pca), c("priceAmount"))]
fotocasa_pcaCE = scale(fotocasa_pcaCE, center = TRUE, scale = TRUE)
X = as.matrix(fotocasa_pcaCE)
# Calculamos los loadings a partir de las coordenadas de las variables
# ya que la librería FactoMineR nos devuelve los loadings ponderados
# por la importancia de cada componente principal.
misLoadings = sweep(res.pca$var$coord, 2, sqrt(res.pca$eig[1:K,1]), FUN="/")
miT2 = colSums(t(misScores**2)/eig.val[1:K,1])
I = nrow(variables)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "p", xlab = "Pisos", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
p2 = fviz_pca_ind(res.pca, axes = c(3,4), geom = c("point"),
habillage = factor(miT2 > F99)) +
tune::coord_obs_pred()
grid.arrange(p1,p2, nrow = 1)
myE = X - misScores %*% t(misLoadings)
mySCR = rowSums(myE^2)
plot(1:length(mySCR), mySCR, type = "l", main = "Distancia al modelo",
ylab = "SCR", xlab = "Inmbuebles", ylim = c(0,180))
g = var(mySCR)/(2*mean(mySCR))
h = (2*mean(mySCR)^2)/var(mySCR)
chi2lim = g*qchisq(0.95, df = h)
chi2lim99 = g*qchisq(0.99, df = h)
abline(h = chi2lim, col = "orange", lty = 2, lwd = 2)
abline(h = chi2lim99, col = "red3", lty = 2, lwd = 2)
dim(X)
dim(misScores)
dim(misLoadings)
myE = X - misScores %*% t(misLoadings)
mySCR = rowSums(myE^2)
plot(1:length(mySCR), mySCR, type = "l", main = "Distancia al modelo",
ylab = "SCR", xlab = "Inmbuebles", ylim = c(0,180))
g = var(mySCR)/(2*mean(mySCR))
h = (2*mean(mySCR)^2)/var(mySCR)
chi2lim = g*qchisq(0.95, df = h)
chi2lim99 = g*qchisq(0.99, df = h)
abline(h = chi2lim, col = "orange", lty = 2, lwd = 2)
abline(h = chi2lim99, col = "red3", lty = 2, lwd = 2)
# Umbral 99 %
atipicos_moderados=fotocasa_pca$URL[ mySCR > chi2lim99 ]
atipicos_moderados
# Umbral 99 %
atipicos_moderados=fotocasa_pca$URL[ mySCR > chi2lim99 ]
atipicos_moderados
# Umbral 99 %
atipicos_moderados=fotocasa_pca$URL[ mySCR > chi2lim99 ]
atipicos_moderados
# Umbral 99 %
atipicos_moderados=fotocasa_pca$URL[ mySCR > chi2lim99 ]
atipicos_moderados
myE = X - misScores %*% t(misLoadings)
mySCR = rowSums(myE^2)
plot(1:length(mySCR), mySCR, type = "l", main = "Distancia al modelo",
ylab = "SCR", xlab = "Inmbuebles", ylim = c(0,180))
g = var(mySCR)/(2*mean(mySCR))
h = (2*mean(mySCR)^2)/var(mySCR)
chi2lim = g*qchisq(0.95, df = h)
chi2lim99 = g*qchisq(0.99, df = h)
abline(h = chi2lim, col = "orange", lty = 2, lwd = 2)
abline(h = chi2lim99, col = "red3", lty = 2, lwd = 2)
# Umbral 99 %
atipicos_moderados=fotocasa_pca$URL[ mySCR > chi2lim99 ]
atipicos_moderados
