for (j in 1:length(SCR)){
eind<-E[j,]
signo<-sign(eind)
contri<-(signo*(eind^2)/SCR[j])*100
contribucion<-rbind(contribucion,contri)
}
rownames(contribucion) = rownames(E)
return(contribucion)
}
## Calculamos las contribuciones de todas las observaciones
mycontris = ContriSCR(E = myE, SCR = mySCR)
## Gráfico para Special_K
barplot(mycontris["https://www.fotocasa.es/es/alquiler/vivienda/valencia-capital/aire-acondicionado-calefaccion-amueblado/185461803/d",],las=2, cex.names = 0.7,
main=c('Contribuciones a SCR para un piso'))
# 2. Obtener las coordenadas (scores) de las observaciones
scores <- res.pca$ind$coord  # Estas son las coordenadas de las observaciones en el espacio PCA
# 3. Reconstrucción de las observaciones desde el espacio PCA
loadings <- res.pca$svd$U  # Cargas del PCA
reconstruccion <- scores %*% t(loadings)  # Reconstrucción de los datos
# 4. Calcular los residuos (diferencia entre los datos originales y la reconstrucción)
residuos <- variables - reconstruccion  # Diferencia entre los datos originales y la reconstrucción
# 5. Calcular el estadístico Q (suma de los residuos al cuadrado por fila)
Q_estadistico <- rowSums(residuos^2)
# 6. Calcular el umbral de atípicos basado en el percentil 95 de Q
umbral_Q <- quantile(Q_estadistico, 0.95)  # Percentil 95
# 7. Identificar las observaciones que no están bien ajustadas
datos_no_ajustados <- variables[Q_estadistico > umbral_Q, ]
# 8. Contar el número de observaciones no ajustadas
num_no_ajustados <- nrow(datos_no_ajustados)
# 9. Calcular el porcentaje de observaciones no ajustadas
porcentaje_no_ajustados <- (num_no_ajustados / nrow(variables)) * 100
# 10. Imprimir los resultados
print(paste("Número de observaciones no explicadas bien por el modelo:", num_no_ajustados))
print(paste("Porcentaje de observaciones no explicadas:", round(porcentaje_no_ajustados, 2), "%"))
print(paste("Umbral de Q para detectar datos no ajustados:", round(umbral_Q, 4)))
# 11. Graficar el estadístico Q y las observaciones no ajustadas
library(ggplot2)
ggplot(data.frame(ID = 1:nrow(variables), Q = Q_estadistico), aes(x = ID, y = Q)) +
geom_point(aes(color = ifelse(Q > umbral_Q, "No ajustado", "Bien ajustado"))) +
scale_color_manual(values = c("Bien ajustado" = "blue", "No ajustado" = "red")) +
labs(title = "Observaciones no explicadas bien por el modelo (Q)",
x = "Índice de observaciones", y = "Estadístico Q", color = "Categoría") +
theme_minimal()
anomalas = which(miT2 > F95)
pisos_sin_anomalos=variables[-anomalas,]
library(knitr)
library(FactoMineR)
library(factoextra)
res.pca_sin_anomalos = PCA(pisos_sin_anomalos, scale.unit = TRUE, graph = FALSE, ncp = K, quanti.sup=23)
eig.val <- get_eigenvalue(res.pca_sin_anomalos)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca_sin_anomalos, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:K,])
# Gráfico de las variables proyectadas en las primeras dos componentes
fviz_pca_var(res.pca, axes = c(1, 2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
# Gráfico de las variables proyectadas en las primeras y terceras componentes
fviz_pca_var(res.pca, axes = c(1, 3), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#no hacemos grafico de scores porque resulta ilegible.
fviz_pca_var(res.pca, axes = c(2, 3), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
# Cargar la librería dplyr si no está cargada
library(dplyr)
# Ver el resultado
head(fotocasa)
fotocasa$municipality <- as.factor(fotocasa$municipality)
library(RColorBrewer)
# Graficar los scores del PCA sin mostrar el número del individuo y coloreado por 'municipio'
fviz_pca_ind(res.pca,
axes = c(1, 2),  # Seleccionar los ejes 1 y 2
repel = TRUE,    # Evitar el solapamiento de etiquetas
label = "none",  # No mostrar el número del individuo
habillage = fotocasa$municipality,  # Colorear por la variable 'minicipio'
palette = rainbow(19),  # Usar paleta de colores
#addEllipses = TRUE,  # Añadir elipses de concentración
legend.title = "municipio"  # Título de la leyenda
)
# Graficar los scores del PCA sin mostrar el número del individuo y coloreado por 'municipio'
fviz_pca_ind(res.pca,
axes = c(1, 3),  # Seleccionar los ejes 1 y 2
repel = TRUE,    # Evitar el solapamiento de etiquetas
label = "none",  # No mostrar el número del individuo
habillage = fotocasa$municipality,  # Colorear por la variable 'municipio'
palette = rainbow(19),  # Usar paleta de colores
#addEllipses = TRUE,  # Añadir elipses de concentración
legend.title = "municipio"  # Título de la leyenda
)
# Cargar la librería dplyr si no está cargada
library(dplyr)
# Ver el resultado
fotocasa$municipality <- as.factor(fotocasa$municipality)
library(RColorBrewer)
# Graficar los scores del PCA sin mostrar el número del individuo y coloreado por 'municipio'
fviz_pca_ind(res.pca,
axes = c(1, 2),  # Seleccionar los ejes 1 y 2
repel = TRUE,    # Evitar el solapamiento de etiquetas
label = "none",  # No mostrar el número del individuo
habillage = fotocasa$municipality,  # Colorear por la variable 'minicipio'
palette = rainbow(19),  # Usar paleta de colores
#addEllipses = TRUE,  # Añadir elipses de concentración
legend.title = "municipio"  # Título de la leyenda
)
# Graficar los scores del PCA sin mostrar el número del individuo y coloreado por 'municipio'
fviz_pca_ind(res.pca,
axes = c(1, 3),  # Seleccionar los ejes 1 y 2
repel = TRUE,    # Evitar el solapamiento de etiquetas
label = "none",  # No mostrar el número del individuo
habillage = fotocasa$municipality,  # Colorear por la variable 'municipio'
palette = rainbow(19),  # Usar paleta de colores
#addEllipses = TRUE,  # Añadir elipses de concentración
legend.title = "municipio"  # Título de la leyenda
)
fotocasa$propertySubtypeId <- as.factor(fotocasa$propertySubtypeId)
library(RColorBrewer)
# Graficar los scores del PCA sin mostrar el número del individuo y coloreado por 'propertySubtypeId'
fviz_pca_ind(res.pca,
axes = c(1, 2),  # Seleccionar los ejes 1 y 2
repel = TRUE,    # Evitar el solapamiento de etiquetas
label = "none",  # No mostrar el número del individuo
habillage = fotocasa$propertySubtypeId,  # Colorear por la variable 'propertySubtypeId'
palette = rainbow(4),  # Usar paleta de colores
#addEllipses = TRUE,  # Añadir elipses de concentración
legend.title = "Property Subtype ID"  # Título de la leyenda
)
# Graficar los scores del PCA sin mostrar el número del individuo y coloreado por 'propertySubtypeId'
fviz_pca_ind(res.pca,
axes = c(1, 3),  # Seleccionar los ejes 1 y 2
repel = TRUE,    # Evitar el solapamiento de etiquetas
label = "none",  # No mostrar el número del individuo
habillage = fotocasa$propertySubtypeId,  # Colorear por la variable 'propertySubtypeId'
palette = rainbow(4),  # Usar paleta de colores
#addEllipses = TRUE,  # Añadir elipses de concentración
legend.title = "Property Subtype ID"  # Título de la leyenda
)
fviz_contrib(res.pca, choice = "var", axes = 1)
fviz_contrib(res.pca, choice = "var", axes = 2)
fviz_contrib(res.pca, choice = "var", axes = 3)
fviz_pca_biplot(res.pca, axes = c(1, 2), repel = TRUE,
col.ind = fotocasa$municipality,  # Usar la columna 'municipio' para colorear los individuos
col.var = "black",           # Las variables se mantienen en rojo
label = "var") +           # Etiquetas de las variables activas
labs(title = "Biplot del PCA: Separación por municipio")
fviz_pca_biplot(res.pca, axes = c(1, 3), repel = TRUE,
col.ind = fotocasa$municipality,  # Usar la columna 'municipio' para colorear los individuos
col.var = "black",           # Las variables se mantienen en rojo
label = "var") +           # Etiquetas de las variables activas
labs(title = "Biplot del PCA: Separación por municipio")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(8)
colores3=pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_eu), col=colores, border=NA, main = "WARD")
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
colnames(fotocasa)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
# Vector con nombres de todas las columnas
columnas= colnames(fotocasa)
# Definir las variables de confort
confort = c("tieneAscensor", "tieneTrastero", "tieneCalefacción", "tieneAireAcondicionado", "bathrooms", "surface", "rooms"
)
# Identificar automáticamente las variables de servicios (aquellas que terminan en "_count")
servicios = grep("_count$", columnas, value = TRUE)
# Crear el data.frame de flags
tabla <- data.frame(
Variable   = columnas,
Confort    = as.integer(columnas %in% confort),
Servicios  = as.integer(columnas %in% servicios),
stringsAsFactors = FALSE
)
# Mostrar resultado
print(tabla)
fotocasaConfort = fotocasa[,tabla$Confort == 1]
head(fotocasaConfort)
fotocasaConfortCE = scale(fotocasaConfort, center = TRUE, scale = TRUE)
help(get_dist)
#distancia GOWER
midist_gower <- gower_dist <- daisy(fotocasaConfortCE, metric = "gower")
fviz_dist(midist_gower, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(grid)
library(gridExtra)
help("fviz_nbclust")
p1 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = hcut, diss=midist_gower,
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,diss=midist_gower,
hc_metric = "manhattan") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaConfortCE, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE, diss=midist_gower) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_gower, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=5)
table(gruposWARD)
clustPAM <- pam(midist_gower, k =6, diss=TRUE)
table(clustPAM$clustering)
library(ggsci)
colores = pal_npg("nrc")(5)
colores2 = pal_npg("nrc")(6)
par(mfrow = c(1,2))
plot(silhouette(gruposWARD, midist_gower), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_gower), col=colores2, border=NA, main = "K-MEDIOIDES")
fotocasaConfort$cluster=gruposWARD
gruposWARD=factor(gruposWARD)
miPCA = PCA(fotocasaConfortCE, scale.unit = FALSE, graph = FALSE, ncp=2)
eig.val = get_eigenvalue(miPCA)
Vmedia = 100 * (1/nrow(eig.val))
fviz_eig(miPCA, addlabels = TRUE) +
geom_hline(yintercept=Vmedia, linetype=2, color="red")
p1 <- fviz_pca_ind(miPCA,
geom = "point",
habillage = gruposWARD,
addEllipses = TRUE,
palette = "jco",
title = "Score plot: individuos")
# Loading plot (variables activas)
p2 <- fviz_pca_var(miPCA,
col.var = "contrib", # Color según contribución a los ejes
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "Loading plot: variables")
# Mostrar ambos juntos
grid.arrange(p1, p2, nrow = 1)
mediasCluster = aggregate(fotocasaConfortCE, by = list("cluster" = gruposWARD), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaConfortCE), labels = colnames(fotocasaConfortCE), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
fotocasaServicios = fotocasa[,tabla$Servicios == 1]
head(fotocasaServicios)
fotocasaServiciosCE = scale(fotocasaServicios, center = TRUE, scale = TRUE)
midist_eu <- get_dist(fotocasaServiciosCE, stand = FALSE, method = "euclidean")
fviz_dist(midist_eu, show_labels = TRUE, lab_size = 0.3,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
library(grid)
library(gridExtra)
help("fviz_nbclust")
p1 = fviz_nbclust(x = fotocasaServiciosCE, FUNcluster = hcut, diss=midist_eu,
hc_method = "ward.D2", k.max = 10, verbose = FALSE,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
p2 = fviz_nbclust(x = fotocasaServiciosCE, FUNcluster = hcut, method = "wss",
hc_method = "ward.D2", k.max = 10, verbose = FALSE,diss=midist_eu,
hc_metric = "euclidean") + labs(title = "Num. optimo clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaServiciosCE, FUNcluster = pam, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaServiciosCE, FUNcluster = pam, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
p1 = fviz_nbclust(x = fotocasaServiciosCE, FUNcluster = kmeans, method = "silhouette",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
p2 = fviz_nbclust(x = fotocasaServiciosCE, FUNcluster = kmeans, method = "wss",
k.max = 10, verbose = FALSE) +
labs(title = "Numero optimo de clusters")
grid.arrange(p1, p2, nrow = 1)
clustWARD <- hclust(midist_eu, method="ward.D2")
gruposWARD <- cutree(clustWARD, k=6)
table(gruposWARD)
clustPAM <- pam(midist_eu, k =8, diss=TRUE)
table(clustPAM$clustering)
set.seed(100)
clustMEANS <- kmeans(fotocasaServiciosCE, centers = 7, nstart = 20)
table(clustMEANS$cluster)
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(8)
colores3=pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_eu), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_eu), col=colores2, border=NA, main = "K-MEDIOIDES")
plot(silhouette(clustMEANS$cluster, midist_eu), col=colores3, border=NA, main = "K-MEDIAS")
fotocasaServicios$cluster=clustMEANS$cluster
fotocasaServicios
# Añadir el cluster a tu dataframe original
library(ggplot2)
library(leaflet)
ggplot() +
geom_point(aes(x = fotocasa$lng,
y = fotocasa$lat,
color = factor(fotocasaServicios$cluster)),
size = 2, alpha = 0.7) +
labs(title = "Clustering geográfico de inmuebles",
x = "Longitud", y = "Latitud", color = "Cluster") +
theme_minimal()
library(leaflet)
library(RColorBrewer)
# Crear paleta con colores diferenciados
pal <- colorFactor(palette = "Set1", domain = fotocasaServicios$cluster)
# Verificamos que 'df_coords' tenga las columnas adecuadas
if("lat" %in% colnames(fotocasa) && "lng" %in% colnames(fotocasa)) {
leaflet(fotocasa) %>%
addTiles() %>%
addCircleMarkers(
lng = ~lng,
lat = ~lat,
color = ~pal(fotocasaServicios$cluster),
radius = 5,
stroke = FALSE,
fillOpacity = 0.8
) %>%
addLegend("bottomright", pal = pal, values = fotocasaServicios$cluster,
title = "Clusters") %>%
setView(lng = mean(fotocasa$lng),
lat = mean(fotocasa$lat),
zoom = 13)
} else {
print("Faltan las columnas 'latitud' o 'longitud' en el dataframe.")
}
clustMEANS$cluster=factor(clustMEANS$cluster)
miPCA = PCA(fotocasaServiciosCE, scale.unit = FALSE, graph = FALSE, ncp=2)
eig.val = get_eigenvalue(miPCA)
Vmedia = 100 * (1/nrow(eig.val))
fviz_eig(miPCA, addlabels = TRUE) +
geom_hline(yintercept=Vmedia, linetype=2, color="red")
p1 <- fviz_pca_ind(miPCA,
geom = "point",
habillage = clustMEANS$cluster,
addEllipses = TRUE,
palette = "jco",
title = "Score plot: individuos")
# Loading plot (variables activas)
p2 <- fviz_pca_var(miPCA,
col.var = "contrib", # Color según contribución a los ejes
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "Loading plot: variables")
# Mostrar ambos juntos
grid.arrange(p1, p2, nrow = 1)
mediasCluster = aggregate(fotocasaServiciosCE, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
mediasCluster = aggregate(fotocasaServiciosCE, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
mediasCluster = aggregate(fotocasaServiciosCE, by = list("cluster" = fotocasaServicios$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
length(rownames(clustMEANS$cluster))
clustMEANS
clustMEANS$cluster
lenght(clustMEANS$cluster)
length(clustMEANS$cluster)
length(clustMEANS$cluster)
mediasCluster = aggregate(fotocasaServiciosCE, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
mediasCluster = aggregate(fotocasaConfortCE, by = list("cluster" = gruposWARD), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:5)
mediasCluster
mediasCluster = aggregate(fotocasaConfortCE, by = list("cluster" = gruposWARD), mean)[,-1]
mediasCluster
rownames(mediasCluster) = paste0("c",1:5)
rownames(mediasCluster) = paste0("c",1:6)
mediasCluster = aggregate(fotocasaConfortCE, by = list("cluster" = gruposWARD), mean)[,-1]
mediasCluster
rownames(mediasCluster) = paste0("c",1:6)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaConfortCE), labels = colnames(fotocasaConfortCE), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
mediasCluster = aggregate(fotocasaServiciosCE, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:7)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaServiciosCE), labels = colnames(fotocasaServiciosCE), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
length(clustMEANS$cluster)
mediasCluster = aggregate(fotocasaServicios, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:7)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaServiciosCE), labels = colnames(fotocasaServiciosCE), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
length(clustMEANS$cluster)
mediasCluster = aggregate(fotocasaServicios, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:7)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 0, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaServiciosCE), labels = colnames(fotocasaServiciosCE), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
length(clustMEANS$cluster)
mediasCluster = aggregate(fotocasaServicios, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:7)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaServiciosCE), labels = colnames(fotocasaServiciosCE), las = 2)
legend("topleft", as.character(1:5), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
length(clustMEANS$cluster)
mediasCluster = aggregate(fotocasaServicios, by = list("cluster" = clustMEANS$cluster), mean)[,-1]
rownames(mediasCluster) = paste0("c",1:7)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaServiciosCE), labels = colnames(fotocasaServiciosCE), las = 2)
legend("topleft", as.character(1:7), col = colores, lwd = 2, ncol = 3, bty = "n")
length(clustMEANS$cluster)
mediasCluster = aggregate(fotocasaConfort, by = list("cluster" = gruposWARD), mean)[,-1]
mediasCluster
rownames(mediasCluster) = paste0("c",1:6)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaConfortCE), labels = colnames(fotocasaConfortCE), las = 2)
legend("topleft", as.character(1:6), col = colores, lwd = 2, ncol = 3, bty = "n")
mediasCluster
mediasCluster = aggregate(fotocasaConfort, by = list("cluster" = gruposWARD), mean)[,-1]
mediasCluster
rownames(mediasCluster) = paste0("c",1:6)
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
axis(side = 1, at = 1:ncol(fotocasaConfort), labels = colnames(fotocasaConfort), las = 2)
legend("topleft", as.character(1:6), col = colores, lwd = 2, ncol = 3, bty = "n")
# Calcula las medias por cluster sin incluir la columna del cluster
mediasCluster = aggregate(fotocasaConfort[, -1], by = list("cluster" = gruposWARD), mean)[,-1]
# Renombra las filas si es necesario
rownames(mediasCluster) = paste0("c", 1:nrow(mediasCluster))
# Grafica las medias por cluster
matplot(t(mediasCluster), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters", xaxt = "n")
# Añade el eje x con los nombres de las variables originales
axis(side = 1, at = 1:ncol(fotocasaConfort), labels = colnames(fotocasaConfort), las = 2)
# Añade la leyenda de los clusters
legend("topleft", legend = rownames(mediasCluster), col = colores, lwd = 2, ncol = 3, bty = "n")
# Vector con nombres de todas las columnas
columnas= colnames(fotocasa)
# Definir las variables de confort
confort = c("tieneAscensor", "tieneTrastero", "tieneCalefacción", "tieneAireAcondicionado", "bathrooms", "surface", "rooms"
)
# Identificar automáticamente las variables de servicios (aquellas que terminan en "_count")
servicios = grep("_count$", columnas, value = TRUE)
# Crear el data.frame de flags
tabla <- data.frame(
Variable   = columnas,
Confort    = as.integer(columnas %in% confort),
Servicios  = as.integer(columnas %in% servicios),
stringsAsFactors = FALSE
)
# Mostrar resultado
print(tabla)
library(ggsci)
colores = pal_npg("nrc")(6)
colores2 = pal_npg("nrc")(8)
colores3=pal_npg("nrc")(7)
par(mfrow = c(1,3))
plot(silhouette(gruposWARD, midist_eu), col=colores, border=NA, main = "WARD")
plot(silhouette(clustPAM$clustering, midist_eu), col=colores2, border=NA, main = "K-MEDIOIDES")
plot(silhouette(clustMEANS$cluster, midist_eu), col=colores3, border=NA, main = "K-MEDIAS")
# Calcula las medias por cluster sin incluir la columna del cluster
# Combina fotocasaConfort con la variable priceAmount del otro data frame
datosExtendidos <- cbind(fotocasaConfort, priceAmount = fotocasa$priceAmount)
# Calcula las medias por cluster, incluyendo priceAmount
mediasClusterExtendido <- aggregate(datosExtendidos, by = list("cluster" = gruposWARD), mean)[,-1]
# Renombra las filas con los nombres de los clusters
rownames(mediasClusterExtendido) <- paste0("c", 1:nrow(mediasClusterExtendido))
# Grafica el perfil medio de los clusters incluyendo priceAmount
matplot(t(mediasClusterExtendido), type = "l", col = colores, ylab = "", xlab = "", lwd = 2,
lty = 1, main = "Perfil medio de los clusters (incluyendo priceAmount)", xaxt = "n")
# Eje x con los nombres de las variables, incluyendo priceAmount
axis(side = 1, at = 1:ncol(mediasClusterExtendido), labels = colnames(mediasClusterExtendido), las = 2)
# Leyenda con los clusters
legend("topleft", legend = rownames(mediasClusterExtendido), col = colores, lwd = 2, ncol = 3, bty = "n")
print(mediasClusterExtendido, row.names = FALSE)
gruposWARD=factor(gruposWARD)
miPCA = PCA(fotocasaConfortCE, scale.unit = FALSE, graph = FALSE, ncp=2, quanti.sup=fotocasa$priceAmount)
fotocasa$priceAmount
length(fotocasa$priceAmount)
gruposWARD=factor(gruposWARD)
miPCA = PCA(fotocasaConfort, scale.unit = FALSE, graph = FALSE, ncp=2, quanti.sup=fotocasa$priceAmount)
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
colnames(fotocasa)
gruposWARD=factor(gruposWARD)
miPCA = PCA(fotocasaConfortCE, scale.unit = FALSE, graph = FALSE, ncp=2, quanti.sup=fotocasa$priceAmount)
gruposWARD=factor(gruposWARD)
fotocasaConfort$priceAmount=fotocasa$priceAmount
miPCA = PCA(fotocasaConfort, scale.unit = TRUE, graph = FALSE, ncp=2, quanti.sup=fotocasaConfort$priceAmount, quali.sup=fotocasaConfort$cluster)
fotocasaConfort$priceAmount=fotocasa$priceAmount
miPCA = PCA(fotocasaConfort, scale.unit = TRUE, graph = FALSE, ncp=2, quanti.sup=fotocasaConfort$priceAmount, quali.sup=fotocasaConfort$cluster)
fotocasaConfort
