knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
BiocManager::install("ropls", force = TRUE)
library(viridis)
library(patchwork)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
fotocasa <- as.data.frame(fotocasa)
rownames(fotocasa) <- fotocasa[[1]]
variables <- fotocasa[, c(9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31, 32, 33)]
# Definir variables predictoras y variable objetivo
X <- variables[, !(names(variables) %in% c("priceAmount", "priceAmountDrop"))]  # Excluir "Precio"
Y <- variables$priceAmount  # Variable objetivo
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none")
library(ropls)
BiocManager::install("ropls", force = TRUE)
library(ropls)
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none")
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = nrow(X),
scaleC = "standard", fig.pdfC = "none")
mypls = opls(x = X, y = Y, predI = NA, crossvalI = 10, scaleC = "standard",
fig.pdfC = "none")
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
knitr::opts_chunk$set(echo = TRUE)
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model: Olive oil")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
BiocManager::install("ropls")
library(ropls)
library(ropls)
library(viridis)
library(patchwork)
library(dplyr)
library(ggplot2)
library(ggrepel)
load("aceite.RData", verbose = TRUE)
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none") # predI = NA:
# mypls@summaryDF --> Para recuperar la información que devuelve en pantalla la función opls
```
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none") # predI = NA:
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = nrow(X),
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model: Olive oil")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
# mypls@modelDF  ## Para recuperar la información de cada componente
dev.off()  # Cierra el dispositivo gráfico activo (si existe uno abierto)
str(myplsC@modelDF)
print(maxNC)
plot(1:10, 1:10, type = "b")
str(myplsC@modelDF)
print(maxNC)
# Definir variables predictoras y variable objetivo
X <- variables[, !(names(variables) %in% c("priceAmount", "priceAmountDrop"))]  # Excluir "Precio"
fotocasa = read_excel("fotocasaImp.xlsx")
library(readxl)
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls", force = TRUE)
library(ropls)
library(viridis)
library(patchwork)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(readxl)
fotocasa = read_excel("fotocasaImp.xlsx")
fotocasa <- as.data.frame(fotocasa)
rownames(fotocasa) <- fotocasa[[1]]
variables <- fotocasa[, c(9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31, 32, 33)]
# Definir variables predictoras y variable objetivo
X <- variables[, !(names(variables) %in% c("priceAmount", "priceAmountDrop"))]  # Excluir "Precio"
Y <- variables$priceAmount  # Variable objetivo
mypls = opls(x = X, y = Y, predI = NA, crossvalI = 10, scaleC = "standard",
fig.pdfC = "none")
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
plot.new()
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0, 0.6),
main = "PLS model: Olive oil")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
length(1:maxNC)
length(myplsC@modelDF$`Q2(cum)`)
summary(myplsC@modelDF$`Q2(cum)`)
dim(myplsC@modelDF)
length(myplsC@modelDF$`R2Y(cum)`)
length(myplsC@modelDF$`Q2(cum)`)
dim(myplsC@modelDF)
maxNC <- 21
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`[1:maxNC], type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0, 0.6),
main = "PLS model: Olive oil")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`[1:maxNC], type = "o", pch = 16, col = "red3",
lwd = 2)
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
plot.new()
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0, 0.6),
main = "PLS model: Olive oil")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
plot.new()
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0, 0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = nrow(X),
scaleC = "standard", fig.pdfC = "none")
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = nrow(X),
scaleC = "standard", fig.pdfC = "none")
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none") # predI = NA:
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
library(ropls)
library(viridis)
library(patchwork)
library(dplyr)
library(ggplot2)
library(ggrepel)
load("aceite.RData", verbose = TRUE)
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none") # predI = NA:
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = nrow(X),
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model: Olive oil")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = nrow(X), scaleC = "standard")
plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
```
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = nrow(X), scaleC = "standard")
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
# Definir variables predictoras y variable objetivo
X <- variables[, !(names(variables) %in% c("priceAmount", "priceAmountDrop"))]  # Excluir "Precio"
Y <- variables$priceAmount  # Variable objetivo
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
fotocasa = read_excel("fotocasaImp.xlsx")
fotocasa <- as.data.frame(fotocasa)
rownames(fotocasa) <- fotocasa[[1]]
variables <- fotocasa[, c(9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31, 32, 33)]
# Definir variables predictoras y variable objetivo
X <- variables[, !(names(variables) %in% c("priceAmount", "priceAmountDrop"))]  # Excluir "Precio"
Y <- variables$priceAmount  # Variable objetivo
mypls = opls(x = X, y = Y, predI = NA, crossvalI = 10, scaleC = "standard",
fig.pdfC = "none")
maxNC = min(dim(X)); maxNC
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard", fig.pdfC = "none")
mypls@vipVn  # VIP
mypls@coefficientMN  # Coeficientes de regresión (B)
# mypls@scoreMN # scores X (T)
# mypls@loadingMN # loadings X (P)
# mypls@weightMN # weights X (W)
# mypls@weightStarMN # weights X (W*)
# mypls@cMN # weights Y (C)
# mypls@uMN # scores Y (U)
plot(x = mypls, typeVc = "x-score",
parAsColFcVn = proced, parCexN = 0.8, parCompVi = c(1, 2, 3, 4),
parEllipsesL = TRUE, parLabVc = rownames(X), parPaletteVc = NA,
parTitleL = TRUE, parCexMetricN = NA)
plot(x = mypls, typeVc = "x-score",
parAsColFcVn = proced, parCexN = 0.8, parCompVi = c(1, 2),
parEllipsesL = TRUE, parLabVc = rownames(X), parPaletteVc = NA,
parTitleL = TRUE, parCexMetricN = NA)
length(X)
dim(X)
min(dim(X))
dim(X)
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
library(ropls)
library(viridis)
library(patchwork)
library(dplyr)
library(ggplot2)
library(ggrepel)
load("aceite.RData", verbose = TRUE)
mypls = opls(x = X, y = Y, predI = NA, crossvalI = nrow(X), scaleC = "standard",
fig.pdfC = "none") # predI = NA:
dim(X)
nrow(X)
ncol(X)
fotocasa = read_excel("fotocasaImp.xlsx")
fotocasa <- as.data.frame(fotocasa)
rownames(fotocasa) <- fotocasa[[1]]
variables <- fotocasa[, c(9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31, 32, 33)]
# Definir variables predictoras y variable objetivo
X <- variables[, !(names(variables) %in% c("priceAmount", "priceAmountDrop"))]  # Excluir "Precio"
Y <- variables$priceAmount  # Variable objetivo
min(dim(X))
maxNC = min(dim(X))
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
maxNC = min(dim(X))
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
maxNC = min(dim(X))
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
maxNC = min(dim(X))
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.35,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
maxNC = min(dim(X))
myplsC = opls(x = X, y = Y, predI = maxNC, crossvalI = 10, # Validación cruzada con 10 folds (k-fold)
scaleC = "standard", fig.pdfC = "none")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.35,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.35,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.35,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
A <- 4
mypls = opls(x = X, y = Y, predI = A, crossvalI = 10, scaleC = "standard")
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.525, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.53, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
abline(h = 0.54, col = "red3", lty = 2)
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.54, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.535, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.536, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
## Este chunk hay que ejecutarlo todo de una, paso a paso da error.
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0.4,0.6),
main = "PLS model")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.525, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
